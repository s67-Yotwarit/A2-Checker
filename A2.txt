import tkinter as tk
from tkinter import messagebox, filedialog

class Checkers:
    def __init__(self, master):
        self.master = master
        self.master.title("‡πÄ‡∏Å‡∏°‡∏´‡∏°‡∏≤‡∏Å‡∏Æ‡∏≠‡∏™")
        self.board = [[0] * 8 for _ in range(8)]
        self.current_player = "‡πÅ‡∏î‡∏á"
        self.selected_piece = None
        self.red_score = 0
        self.blue_score = 0

        self.create_board()

        self.turn_label = tk.Label(self.master, text=f"‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: {self.current_player}", font=('Arial', 16))
        self.turn_label.grid(row=8, column=0, columnspan=8)

        self.score_label = tk.Label(self.master, text=f"‡πÅ‡∏î‡∏á: {self.red_score}   ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô: {self.blue_score}", font=('Arial', 14))
        self.score_label.grid(row=9, column=0, columnspan=8)

        self.save_button = tk.Button(self.master, text="‡πÄ‡∏ã‡∏ü‡πÄ‡∏Å‡∏°", command=self.save_game)
        self.save_button.grid(row=10, column=0, columnspan=4)
        self.load_button = tk.Button(self.master, text="‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°", command=self.load_game)
        self.load_button.grid(row=10, column=4, columnspan=4)

    def create_board(self):
        self.buttons = [[None] * 8 for _ in range(8)]
        for row in range(8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    color = "darkgray"
                    button = tk.Button(self.master, width=6, height=3, bg=color,
                                       command=lambda r=row, c=col: self.on_click(r, c))
                else:
                    color = "lightgray"
                    button = tk.Button(self.master, width=6, height=3, bg=color, state=tk.DISABLED)

                button.grid(row=row, column=col)
                self.buttons[row][col] = button
            
        self.initialize_pieces() 

    def initialize_pieces(self):
        for row in range(2):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.board[row][col] = 1  # ‡∏´‡∏°‡∏≤‡∏Å‡πÅ‡∏î‡∏á
                    self.buttons[row][col].config(text="üî¥", fg="red")

        for row in range(6, 8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.board[row][col] = 2  # ‡∏´‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
                    self.buttons[row][col].config(text="üîµ", fg="blue")

    def highlight_valid_moves(self):
        if self.selected_piece:
            start_row, start_col = self.selected_piece
            piece = self.board[start_row][start_col]

            self.reset_button_colors()

            # ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
            if piece in [1, 2]:  # ‡∏´‡∏°‡∏≤‡∏Å‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                directions = [(1, -1), (1, 1)] if piece == 1 else [(-1, -1), (-1, 1)]  # ‡∏´‡∏°‡∏≤‡∏Å‡πÅ‡∏î‡∏á / ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
                for drow, dcol in directions:
                    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á
                    row, col = start_row + drow, start_col + dcol
                    if 0 <= row < 8 and 0 <= col < 8 and self.board[row][col] == 0:
                        self.buttons[row][col].config(bg="lightgreen")

                    # ‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
                    row += drow
                    col += dcol
                    mid_row, mid_col = start_row + drow, start_col + dcol
                    if 0 <= row < 8 and 0 <= col < 8:
                        if self.board[row][col] == 0 and self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] != piece:
                            self.buttons[row][col].config(bg="lightgreen")

            # ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏á
            elif piece in [3, 4]:  # ‡∏Ñ‡∏¥‡∏á
                directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
                for drow, dcol in directions:
                    row, col = start_row, start_col
                    while True:
                        row += drow
                        col += dcol
                        if 0 <= row < 8 and 0 <= col < 8:
                            if self.board[row][col] == 0:
                                self.buttons[row][col].config(bg="lightgreen")
                            elif self.board[row][col] != piece:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
                                row_next = row + drow
                                col_next = col + dcol
                                if 0 <= row_next < 8 and 0 <= col_next < 8 and self.board[row_next][col_next] == 0:
                                    self.buttons[row_next][col_next].config(bg="lightgreen")
                                break
                            else:
                                break
                        else:
                            break

    def reset_button_colors(self):
        for row in range(8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.buttons[row][col].config(bg="darkgray")
                else:
                    self.buttons[row][col].config(bg="lightgray")

    def unselect_piece(self):
        self.selected_piece = None
        self.reset_button_colors()

    def on_click(self, row, col):
        if self.selected_piece:
            if (row, col) == self.selected_piece:
                self.unselect_piece()
            elif self.is_valid_move(row, col):
                self.move_piece(row, col)
                self.check_for_winner()
                self.current_player = "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô" if self.current_player == "‡πÅ‡∏î‡∏á" else "‡πÅ‡∏î‡∏á"
                self.turn_label.config(text=f"‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: {self.current_player}")
                self.selected_piece = None
                self.reset_button_colors()
        else:
            if self.board[row][col] in [1, 2, 3, 4]:  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏Å
                if (self.current_player == "‡πÅ‡∏î‡∏á" and self.board[row][col] in [1, 3]) or \
                   (self.current_player == "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô" and self.board[row][col] in [2, 4]):
                    self.selected_piece = (row, col)
                    self.highlight_valid_moves()

    def is_valid_move(self, row, col):
        if self.selected_piece is None:
            return False

        start_row, start_col = self.selected_piece
        piece = self.board[start_row][start_col]

        if self.board[row][col] != 0:
            return False

        if piece in [1, 3]:  # ‡∏ó‡∏µ‡∏°‡πÅ‡∏î‡∏á
            direction = 1 if piece == 1 else -1
            if direction == 1:  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
                if row - start_row == 1 and abs(col - start_col) == 1:
                    return True
                elif row - start_row == 2 and abs(col - start_col) == 2:
                    mid_row = (start_row + row) // 2
                    mid_col = (start_col + col) // 2
                    if self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] not in [1, 3]:
                        return True
            elif direction == -1:  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
                if row - start_row == -1 and abs(col - start_col) == 1:
                    return True
                elif row - start_row == -2 and abs(col - start_col) == 2:
                    mid_row = (start_row + row) // 2
                    mid_col = (start_col + col) // 2
                    if self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] not in [1, 3]:
                        return True

        elif piece in [2, 4]:  # ‡∏ó‡∏µ‡∏°‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
            direction = -1 if piece == 2 else 1
            if direction == -1:  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
                if row - start_row == -1 and abs(col - start_col) == 1:
                    return True
                elif row - start_row == -2 and abs(col - start_col) == 2:
                    mid_row = (start_row + row) // 2
                    mid_col = (start_col + col) // 2
                    if self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] not in [2, 4]:
                        return True
            elif direction == 1:  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
                if row - start_row == 1 and abs(col - start_col) == 1:
                    return True
                elif row - start_row == 2 and abs(col - start_col) == 2:
                    mid_row = (start_row + row) // 2
                    mid_col = (start_col + col) // 2
                    if self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] not in [2, 4]:
                        return True

        if piece in [3, 4]:  # ‡∏Ñ‡∏¥‡∏á
            directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
            for drow, dcol in directions:
                row_check = start_row
                col_check = start_col
                while True:
                    row_check += drow
                    col_check += dcol
                    if 0 <= row_check < 8 and 0 <= col_check < 8:
                        if row_check == row and col_check == col:
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            if self.board[row_check][col_check] not in [piece, 1, 3, 2, 4]:
                                mid_row = (start_row + row_check) // 2
                                mid_col = (start_col + col_check) // 2
                                if self.board[mid_row][mid_col] == 0:
                                    return True
                            break
                        if self.board[row_check][col_check] != 0:
                            # ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                            if self.board[row_check][col_check] not in [piece, 1, 3, 2, 4]:
                                mid_row = (start_row + row_check) // 2
                                mid_col = (start_col + col_check) // 2
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô
                                if self.board[mid_row][mid_col] == 0:
                                    return True
                            break
                    else:
                        break

        return False


    def move_piece(self, row, col):
        start_row, start_col = self.selected_piece
        piece = self.board[start_row][start_col]

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≠‡∏£‡πå‡∏î
        self.board[start_row][start_col] = 0  # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        self.board[row][col] = piece

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        self.buttons[start_row][start_col].config(text="", bg="lightgray" if (start_row + start_col) % 2 == 0 else "darkgray")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏Å
        if piece == 1:  # ‡∏´‡∏°‡∏≤‡∏Å‡πÅ‡∏î‡∏á
            self.buttons[row][col].config(text="üî¥", fg="red")
        elif piece == 2:  # ‡∏´‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
            self.buttons[row][col].config(text="üîµ", fg="blue")
        elif piece == 3:  # ‡∏Ñ‡∏¥‡∏á‡πÅ‡∏î‡∏á
            self.buttons[row][col].config(text="üëë", fg="red")
        elif piece == 4:  # ‡∏Ñ‡∏¥‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
            self.buttons[row][col].config(text="üëë", fg="blue")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏¥‡∏á
        if piece == 1 and row == 7:  # ‡∏´‡∏°‡∏≤‡∏Å‡πÅ‡∏î‡∏á‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏¥‡∏á
            self.board[row][col] = 3
            self.buttons[row][col].config(text="üëë", fg="red")
        elif piece == 2 and row == 0:  # ‡∏´‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏¥‡∏á
            self.board[row][col] = 4
            self.buttons[row][col].config(text="üëë", fg="blue")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô
        if abs(row - start_row) >= 2 and abs(col - start_col) >= 2:
            mid_row = (start_row + row) // 2
            mid_col = (start_col + col) // 2

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
            step_row = (row - start_row) // abs(row - start_row)
            step_col = (col - start_col) // abs(col - start_col)

            check_row, check_col = start_row + step_row, start_col + step_col
            while check_row != row and check_col != col:
                if self.board[check_row][check_col] != 0 and self.board[check_row][check_col] != piece:
                    self.board[check_row][check_col] = 0
                    self.buttons[check_row][check_col].config(text="", bg="lightgray" if (check_row + check_col) % 2 == 0 else "darkgray")
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
                    if self.current_player == "‡πÅ‡∏î‡∏á":
                        self.red_score += 1
                    else:
                        self.blue_score += 1
                check_row += step_row
                check_col += step_col
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô UI
        self.update_score_display()

    def update_score_display(self):
        self.score_label.config(text=f"‡πÅ‡∏î‡∏á: {self.red_score}   ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô: {self.blue_score}")

    def check_for_winner(self):
        red_count = sum(piece in [1, 3] for row in self.board for piece in row)
        blue_count = sum(piece in [2, 4] for row in self.board for piece in row)

        if red_count == 0:
            messagebox.showinfo("‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞", "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ä‡∏ô‡∏∞!")
            self.reset_game()
        elif blue_count == 0:
            messagebox.showinfo("‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞", "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏î‡∏á‡∏ä‡∏ô‡∏∞!")
            self.reset_game()

    def reset_game(self):
        self.create_board()
        self.current_player = "‡πÅ‡∏î‡∏á"
        self.selected_piece = None
        self.red_score = 0
        self.blue_score = 0
        self.score_label.config(text=f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ‡πÅ‡∏î‡∏á {self.red_score} - ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô {self.blue_score}")
        self.initialize_pieces()

    def save_game(self):
        game_data = {
            "board": self.board,
            "current_player": self.current_player,
            "red_score": self.red_score,
            "blue_score": self.blue_score
        }

        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if file_path:
            try:
                with open(file_path, "w", encoding="utf-8") as file:
                    file.write(f"Current Player: {self.current_player}\n")
                    file.write(f"Red Score: {self.red_score}\n")
                    file.write(f"Blue Score: {self.blue_score}\n")
                    file.write("Board:\n")
                    
                    for row in self.board:
                        file.write(" ".join(map(str, row)) + "\n")
                    
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏ã‡∏ü‡πÄ‡∏Å‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            except Exception as e:
                messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
        else:
            messagebox.showwarning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå")

    def load_game(self):
        file_path = filedialog.askopenfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    lines = file.readlines()

                self.current_player = lines[0].strip().split(": ")[1]
                self.red_score = int(lines[1].strip().split(": ")[1])
                self.blue_score = int(lines[2].strip().split(": ")[1])

                self.board = []
                for line in lines[4:]:
                    row = list(map(int, line.strip().split()))
                    self.board.append(row)

                self.update_score_display()
                self.turn_label.config(text=f"‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: {self.current_player}")

                for row in range(8):
                    for col in range(8):
                        piece = self.board[row][col]
                        if piece == 1:
                            self.buttons[row][col].config(text="üî¥", fg="red")
                        elif piece == 2:
                            self.buttons[row][col].config(text="üîµ", fg="blue")
                        elif piece == 3:
                            self.buttons[row][col].config(text="üëë", fg="red")  # ‡∏Ñ‡∏¥‡∏á‡πÅ‡∏î‡∏á
                        elif piece == 4:
                            self.buttons[row][col].config(text="üëë", fg="blue")  # ‡∏Ñ‡∏¥‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
                        else:
                            self.buttons[row][col].config(text="", bg="lightgray" if (row + col) % 2 == 0 else "darkgray")

                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

            except Exception as e:
                messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
        else:
            messagebox.showwarning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î")

if __name__ == "__main__":
    root = tk.Tk()
    game = Checkers(root)
    root.mainloop()
