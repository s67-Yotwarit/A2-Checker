import tkinter as tk
from tkinter import messagebox, filedialog

class Checkers:
    def __init__(self, master):
        self.master = master
        self.master.title("‡πÄ‡∏Å‡∏°‡∏´‡∏°‡∏≤‡∏Å‡∏Æ‡∏≠‡∏™")
        self.board = [[0] * 8 for _ in range(8)]  # 0 = ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, 1 = ‡∏´‡∏°‡∏≤‡∏Å‡πÅ‡∏î‡∏á, 2 = ‡∏´‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        self.current_player = "‡πÅ‡∏î‡∏á"
        self.selected_piece = None
        self.red_score = 0
        self.blue_score = 0

        self.create_board()

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        self.turn_label = tk.Label(self.master, text=f"‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: {self.current_player}", font=('Arial', 16))
        self.turn_label.grid(row=8, column=0, columnspan=8)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        self.score_label = tk.Label(self.master, text=f"‡πÅ‡∏î‡∏á: {self.red_score}   ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô: {self.blue_score}", font=('Arial', 14))
        self.score_label.grid(row=9, column=0, columnspan=8)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏ü‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°
        self.save_button = tk.Button(self.master, text="‡πÄ‡∏ã‡∏ü‡πÄ‡∏Å‡∏°", command=self.save_game)
        self.save_button.grid(row=10, column=0, columnspan=4)
        self.load_button = tk.Button(self.master, text="‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°", command=self.load_game)
        self.load_button.grid(row=10, column=4, columnspan=4)

    def create_board(self):
        self.buttons = [[None] * 8 for _ in range(8)]
        for row in range(8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    color = "darkgray"  # ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ
                    button = tk.Button(self.master, width=6, height=3, bg=color,
                                       command=lambda r=row, c=col: self.on_click(r, c))
                else:
                    color = "lightgray"  # ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ
                    button = tk.Button(self.master, width=6, height=3, bg=color, state=tk.DISABLED)

                button.grid(row=row, column=col)
                self.buttons[row][col] = button
            
        self.initialize_pieces() 
    
    def initialize_pieces(self):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏Å
        for row in range(2):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.board[row][col] = 1  # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1 ‡πÅ‡∏ó‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡πÅ‡∏î‡∏á
                    self.buttons[row][col].config(text="üî¥", fg="red")

        for row in range(6, 8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.board[row][col] = 2  # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 2 ‡πÅ‡∏ó‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
                    self.buttons[row][col].config(text="üîµ", fg="blue")

    def highlight_valid_moves(self):
        # ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ
        if self.selected_piece:
            start_row, start_col = self.selected_piece
            piece = self.board[start_row][start_col]
            direction = 1 if piece == 1 else -1  # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà

            # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
            self.reset_button_colors()

            # ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
            for dcol in [-1, 1]:  # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
                row = start_row + direction
                col = start_col + dcol
                if 0 <= row < 8 and 0 <= col < 8 and self.board[row][col] == 0:
                    self.buttons[row][col].config(bg="lightgreen")

            # ‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å (‡πÄ‡∏î‡∏¥‡∏ô 2 ‡∏ä‡πà‡∏≠‡∏á)
            for dcol in [-1, 1]:  # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
                row = start_row + 2 * direction
                col = start_col + 2 * dcol
                mid_row = start_row + direction
                mid_col = start_col + dcol
                if 0 <= row < 8 and 0 <= col < 8 and self.board[row][col] == 0:
                    if self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] != piece:
                        self.buttons[row][col].config(bg="lightgreen")

    def reset_button_colors(self):
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for row in range(8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.buttons[row][col].config(bg="darkgray" if (row + col) % 2 == 1 else "lightgray")

    def unselect_piece(self):
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏Å
        self.selected_piece = None
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.reset_button_colors()

    def on_click(self, row, col):
        if self.selected_piece:
            # ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            if (row, col) == self.selected_piece:
                # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                self.unselect_piece()
            elif self.is_valid_move(row, col):
                # ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                self.move_piece(row, col)
                self.current_player = "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô" if self.current_player == "‡πÅ‡∏î‡∏á" else "‡πÅ‡∏î‡∏á"
                self.turn_label.config(text=f"‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: {self.current_player}")
                self.selected_piece = None
                self.reset_button_colors()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
        else:
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            if self.board[row][col] == 1 and self.current_player == "‡πÅ‡∏î‡∏á":
                self.selected_piece = (row, col)
                self.highlight_valid_moves()  # ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ
            elif self.board[row][col] == 2 and self.current_player == "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô":
                self.selected_piece = (row, col)
                self.highlight_valid_moves()  # ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ

    def is_valid_move(self, row, col):
        if self.selected_piece is None:
            return False

        start_row, start_col = self.selected_piece
        piece = self.board[start_row][start_col]

        if self.board[row][col] != 0:
            return False  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

        direction = 1 if piece == 1 else -1  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà

        # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        if (row - start_row) == direction and abs(col - start_col) == 1:
            return True

        # ‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
        if (row - start_row) == 2 * direction and abs(col - start_col) == 2:
            mid_row = (start_row + row) // 2
            mid_col = (start_col + col) // 2
            if self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] != piece:
                return True

        return False

    def move_piece(self, row, col):
        start_row, start_col = self.selected_piece
        piece = self.board[start_row][start_col]

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≠‡∏£‡πå‡∏î
        self.board[start_row][start_col] = 0  # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        self.board[row][col] = piece

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        self.buttons[start_row][start_col].config(text="", bg="lightgray" if (start_row + start_col) % 2 == 0 else "darkgray")
        self.buttons[row][col].config(text="üî¥" if piece == 1 else "üîµ", fg="red" if piece == 1 else "blue")

        # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô
        if abs(row - start_row) == 2:
            mid_row = (start_row + row) // 2
            mid_col = (start_col + col) // 2
            self.board[mid_row][mid_col] = 0  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            self.buttons[mid_row][mid_col].config(text="", bg="lightgray" if (mid_row + mid_col) % 2 == 0 else "darkgray")

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
            if self.current_player == "‡πÅ‡∏î‡∏á":
                self.red_score += 1
            else:
                self.blue_score += 1

        self.update_score_display()

    def update_score_display(self):
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô Label
        self.score_label.config(text=f"‡πÅ‡∏î‡∏á: {self.red_score}   ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô: {self.blue_score}")

    def save_game(self):
        # ‡πÄ‡∏ã‡∏ü‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .txt
        game_data = {
            "board": self.board,
            "current_player": self.current_player,
            "red_score": self.red_score,
            "blue_score": self.blue_score
        }

        # ‡πÉ‡∏ä‡πâ file dialog ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if file_path:
            try:
                with open(file_path, "w", encoding="utf-8") as file:  # ‡∏£‡∏∞‡∏ö‡∏∏ encoding ‡πÄ‡∏õ‡πá‡∏ô 'utf-8'
                    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
                    file.write(f"Current Player: {self.current_player}\n")
                    file.write(f"Red Score: {self.red_score}\n")
                    file.write(f"Blue Score: {self.blue_score}\n")
                    file.write("Board:\n")
                    
                    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
                    for row in self.board:
                        file.write(" ".join(map(str, row)) + "\n")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏ã‡∏ü‡πÄ‡∏Å‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            except Exception as e:
                messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
        else:
            messagebox.showwarning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå")

    def load_game(self):
        # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .txt
        file_path = filedialog.askopenfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as file:  # ‡∏£‡∏∞‡∏ö‡∏∏ encoding ‡πÄ‡∏õ‡πá‡∏ô 'utf-8'
                    lines = file.readlines()  # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå

                # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
                self.current_player = lines[0].strip().split(": ")[1]  # ‡∏≠‡πà‡∏≤‡∏ô Current Player
                self.red_score = int(lines[1].strip().split(": ")[1])  # ‡∏≠‡πà‡∏≤‡∏ô Red Score
                self.blue_score = int(lines[2].strip().split(": ")[1])  # ‡∏≠‡πà‡∏≤‡∏ô Blue Score

                # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏£‡πå‡∏î
                self.board = []
                for line in lines[4:]:  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "Board:"
                    row = list(map(int, line.strip().split()))  # ‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î
                    self.board.append(row)

                # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI
                self.update_score_display()  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô UI
                self.turn_label.config(text=f"‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: {self.current_player}")  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î
                for row in range(8):
                    for col in range(8):
                        piece = self.board[row][col]
                        if piece == 1:
                            self.buttons[row][col].config(text="üî¥", fg="red")  # ‡∏´‡∏°‡∏≤‡∏Å‡πÅ‡∏î‡∏á
                        elif piece == 2:
                            self.buttons[row][col].config(text="üîµ", fg="blue")  # ‡∏´‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
                        else:
                            self.buttons[row][col].config(text="", bg="lightgray" if (row + col) % 2 == 0 else "darkgray")

                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à

            except Exception as e:
                messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")  # ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        else:
            messagebox.showwarning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î")

if __name__ == "__main__":
    root = tk.Tk()
    game = Checkers(root)
    root.mainloop()
